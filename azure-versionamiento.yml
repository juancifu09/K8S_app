trigger:
  #branches:
    #include:
      - main

pool:
  name: Local-Agent-Pool 

variables:
  # Define el prefijo para las etiquetas
  tagPrefix: 'v'

steps:
- script: |
    echo "Obteniendo el último tag del repositorio..."
    # Obtener el último tag existente
    LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
    git tag
    echo "Último tag encontrado: $LAST_TAG"

    # Extraer los números de versión del último tag
    MAJOR=$(echo $LAST_TAG | cut -d '.' -f 1 | cut -d 'v' -f 2)
    MINOR=$(echo $LAST_TAG | cut -d '.' -f 2)
    PATCH=$(echo $LAST_TAG | cut -d '.' -f 3)

    # Incrementar el número de PATCH (o MINOR/MAJOR según tu lógica)
    NEW_PATCH=$((PATCH + 1))
    NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"

    # Guardar la nueva versión como variable del pipeline
    echo "Nueva versión generada: $(tagPrefix)$NEW_VERSION"
    echo "##vso[task.setvariable variable=newVersion]$(tagPrefix)$NEW_VERSION"
  displayName: "Generar Nueva Versión Semántica"

- script: |
    echo "Creando un nuevo tag con la versión $(newVersion)..."
    git config --global user.email "$(GIT_USER_EMAIL)"
    git config --global user.name "$(GIT_USER_NAME)"
    echo "Verificando la configuración de Git..."
    git config --global --list
    git tag $(newVersion)
    git remote set-url origin https://$(GITHUB_TOKEN)@github.com/$(Build.Repository.Name).git
    git push origin $(newVersion)
    curl -X POST -H "Authorization: token $(GITHUB_TOKEN)" \
      -d "{\"tag_name\":\"$(newVersion)\",\"name\":\"$(newVersion)\",\"body\":\"Release de versión $(newVersion)\",\"draft\":false,\"prerelease\":false}" \
      https://api.github.com/repos/$(Build.Repository.Name)/releases
  displayName: "Crear y Subir Tag"
  env:
    GITHUB_TOKEN: $(GITHUB_TOKEN)